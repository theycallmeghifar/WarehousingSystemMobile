// Generated by view binder compiler. Do not edit!
package fim.project.warehousingsystemmobile.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import fim.project.warehousingsystemmobile.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemHistoryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView imgHistoryStatus;

  @NonNull
  public final TextView txtDeliveryNoteHistory;

  @NonNull
  public final TextView txtItemCodeHistory;

  @NonNull
  public final TextView txtItemNameHistory;

  @NonNull
  public final TextView txtJumlahKeluarHistory;

  @NonNull
  public final TextView txtJumlahKeluarHistoryParent;

  @NonNull
  public final TextView txtJumlahMasukHistory;

  @NonNull
  public final TextView txtJumlahMasukHistoryParent;

  @NonNull
  public final TextView txtMainItemCodeHistory;

  @NonNull
  public final TextView txtMainItemNameHistory;

  @NonNull
  public final TextView txtNamaLemariHistory;

  @NonNull
  public final TextView txtNamaPaletHistory;

  @NonNull
  public final TextView txtNamaRakHistory;

  @NonNull
  public final TextView txtPurchaseOrderHistory;

  @NonNull
  public final TextView txtTanggalHistory;

  private ItemHistoryBinding(@NonNull LinearLayout rootView, @NonNull ImageView imgHistoryStatus,
      @NonNull TextView txtDeliveryNoteHistory, @NonNull TextView txtItemCodeHistory,
      @NonNull TextView txtItemNameHistory, @NonNull TextView txtJumlahKeluarHistory,
      @NonNull TextView txtJumlahKeluarHistoryParent, @NonNull TextView txtJumlahMasukHistory,
      @NonNull TextView txtJumlahMasukHistoryParent, @NonNull TextView txtMainItemCodeHistory,
      @NonNull TextView txtMainItemNameHistory, @NonNull TextView txtNamaLemariHistory,
      @NonNull TextView txtNamaPaletHistory, @NonNull TextView txtNamaRakHistory,
      @NonNull TextView txtPurchaseOrderHistory, @NonNull TextView txtTanggalHistory) {
    this.rootView = rootView;
    this.imgHistoryStatus = imgHistoryStatus;
    this.txtDeliveryNoteHistory = txtDeliveryNoteHistory;
    this.txtItemCodeHistory = txtItemCodeHistory;
    this.txtItemNameHistory = txtItemNameHistory;
    this.txtJumlahKeluarHistory = txtJumlahKeluarHistory;
    this.txtJumlahKeluarHistoryParent = txtJumlahKeluarHistoryParent;
    this.txtJumlahMasukHistory = txtJumlahMasukHistory;
    this.txtJumlahMasukHistoryParent = txtJumlahMasukHistoryParent;
    this.txtMainItemCodeHistory = txtMainItemCodeHistory;
    this.txtMainItemNameHistory = txtMainItemNameHistory;
    this.txtNamaLemariHistory = txtNamaLemariHistory;
    this.txtNamaPaletHistory = txtNamaPaletHistory;
    this.txtNamaRakHistory = txtNamaRakHistory;
    this.txtPurchaseOrderHistory = txtPurchaseOrderHistory;
    this.txtTanggalHistory = txtTanggalHistory;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.img_history_status;
      ImageView imgHistoryStatus = ViewBindings.findChildViewById(rootView, id);
      if (imgHistoryStatus == null) {
        break missingId;
      }

      id = R.id.txtDeliveryNoteHistory;
      TextView txtDeliveryNoteHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtDeliveryNoteHistory == null) {
        break missingId;
      }

      id = R.id.txtItemCodeHistory;
      TextView txtItemCodeHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtItemCodeHistory == null) {
        break missingId;
      }

      id = R.id.txtItemNameHistory;
      TextView txtItemNameHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtItemNameHistory == null) {
        break missingId;
      }

      id = R.id.txtJumlahKeluarHistory;
      TextView txtJumlahKeluarHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtJumlahKeluarHistory == null) {
        break missingId;
      }

      id = R.id.txtJumlahKeluarHistoryParent;
      TextView txtJumlahKeluarHistoryParent = ViewBindings.findChildViewById(rootView, id);
      if (txtJumlahKeluarHistoryParent == null) {
        break missingId;
      }

      id = R.id.txtJumlahMasukHistory;
      TextView txtJumlahMasukHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtJumlahMasukHistory == null) {
        break missingId;
      }

      id = R.id.txtJumlahMasukHistoryParent;
      TextView txtJumlahMasukHistoryParent = ViewBindings.findChildViewById(rootView, id);
      if (txtJumlahMasukHistoryParent == null) {
        break missingId;
      }

      id = R.id.txtMainItemCodeHistory;
      TextView txtMainItemCodeHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtMainItemCodeHistory == null) {
        break missingId;
      }

      id = R.id.txtMainItemNameHistory;
      TextView txtMainItemNameHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtMainItemNameHistory == null) {
        break missingId;
      }

      id = R.id.txtNamaLemariHistory;
      TextView txtNamaLemariHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtNamaLemariHistory == null) {
        break missingId;
      }

      id = R.id.txtNamaPaletHistory;
      TextView txtNamaPaletHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtNamaPaletHistory == null) {
        break missingId;
      }

      id = R.id.txtNamaRakHistory;
      TextView txtNamaRakHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtNamaRakHistory == null) {
        break missingId;
      }

      id = R.id.txtPurchaseOrderHistory;
      TextView txtPurchaseOrderHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtPurchaseOrderHistory == null) {
        break missingId;
      }

      id = R.id.txtTanggalHistory;
      TextView txtTanggalHistory = ViewBindings.findChildViewById(rootView, id);
      if (txtTanggalHistory == null) {
        break missingId;
      }

      return new ItemHistoryBinding((LinearLayout) rootView, imgHistoryStatus,
          txtDeliveryNoteHistory, txtItemCodeHistory, txtItemNameHistory, txtJumlahKeluarHistory,
          txtJumlahKeluarHistoryParent, txtJumlahMasukHistory, txtJumlahMasukHistoryParent,
          txtMainItemCodeHistory, txtMainItemNameHistory, txtNamaLemariHistory, txtNamaPaletHistory,
          txtNamaRakHistory, txtPurchaseOrderHistory, txtTanggalHistory);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
